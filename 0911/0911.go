package main

import (
	"fmt"
)

func main() {
	var n int
	var c string

	fmt.Scan(&c, &n)

	fmt.Print(WeighingWith3(c, n))

}

/*
1. Объявление констант
2. Использовать минимально достаточный тип данных
3. Паттерн StringBuilder / join
4. if-else 39-44
5. switch case 56-62

*/

/*
	Требование №1: число представимо в виде суммы степеней тройки, причём каждая из степеней не может повторяться дважды.

	Дано: некоторое число L
	Надо: найти некоторое число М >= L, удовлетворяющее всем критериям одновременно:
	- число M удовлетворяет требованию №1
	- M = L + K, где K - либо 0, либо удовлетворяет требованию 1

	Та же задача: найти (желательно минимальное) K удовлетворяющее требованию 1 такое что (L + K) тоже удовлетворяет этому требованию

	Пример:

	L = 50, разложим его в троичную систему при этом разряды будем хранить в массиве так, что младший разряд соответствует младшему индексу

	L = 3^3 + 2*3^2 + 3^1 + 2*3^0 = 1212 (в троичной системе)

	L / 3 = 3^2 + 2*3^1 + 3^0

	Массив P = [2,1,2,1]

	Алгоритм:
		1. Проходим по всем элементам массива Р, начиная с младшего.
		2. Если элемент = 2, то прибавляем к нему 1 и делаем перенос в старший разряд. Примечание: технически обнуляем переменную и увеличиваем следующий элемент.
		2.1 Если элемент = 3, то делаем перенос.
		3. Если элемент равен 1 или 0, то пропускаем его.
		4. Сохраняем в другом массиве в тех же индексах сколько прибавляли к массиву Р.
	Массив Р = [0,0,0,0,1]
	Массив Z = [1,1,0,1]

	L: 1 3 27
	R: 81


*/

func WeighingWith3(side string, number int) (string, string) {
	power3 := []string{"1", "3", "9", "27", "81", "243", "729", "2187", "6561", "19683", "59049", "177147", "531441", "1594323", "4782969", "14348907", "43046721", "129140163", "387420489", "1162261467"}
	var side1, side2, left, right string
	numberTo3System := convertToTernarySystem(number)
	for i := 0; i < len(numberTo3System); i++ {
		if numberTo3System[i] == '-' {
			side1 = side1 + power3[i] + " "
		}
		if numberTo3System[i] == '+' {
			side2 = side2 + power3[i] + " "
		}

	}

	if side == "L" {
		left = "L:" + side1 + "\n"
		right = "R:" + side2
	}

	if side == "R" {
		left = "L:" + side2 + "\n"
		right = "R:" + side1
	}

	return left, right
}

func convertToTernarySystem(number int) string {
	var result, digit string
	for number > 0 {
		b := number % 3
		if b == 0 {
			digit = "0"
		}
		if b == 1 {
			digit = "+"
		}
		if b == 2 {
			digit = "-"
			number++
		}
		result = result + digit
		number = number / 3

	}
	return result
}
